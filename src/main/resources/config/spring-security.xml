<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" 
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
						http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- 配置不需要认证鉴权的资源 -->
    <!-- 静态资源过滤 -->
	<http pattern="/resources/**" security="none" />
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.ico" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/login.jsp*" security="none" />
	
    <http use-expressions="true" 
    	entry-point-ref="authenticationEntryPoint" 
    	access-denied-page="/403.jsp">
    	<!-- 登录表单 -->
    	<form-login login-page="/login.jsp"/>
    	
    	<!-- 登出管理 -->	
    	<logout logout-url="/j_spring_security_logout" logout-success-url="/login.jsp" delete-cookies="JSESSIONID"/>
    	
    	<!-- 会话管理 -->
    	<session-management invalid-session-url="/sessionTimeOut.jsp">
    		<concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
    	</session-management>
    	
		<!-- 自定义过滤器，认证和鉴权处理 -->
        <custom-filter ref="myAuthenticationFilter" before="FORM_LOGIN_FILTER"  />
        <custom-filter ref="myAuthorizationFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    </http>
    
    <!-- 认证过滤器， -->
	<beans:bean id="myAuthenticationFilter" class="com.platform.project.sys.security.springsecurity.MyAuthenticationFilter">
	
		<!-- 用户名密码此处设置的为默认值，下面用户名密码参数需跟登录页面中用户名和密码文本的name值保持一致，
			在认证过滤器中通过注入的此用户密码值来获取登陆页面中的用户名密码，详见类：com.platform.project.sys.security.springsecurity.MyAuthenticationFilter.java -->
		<beans:property name="usernameParameter" value="j_username"/>	
		<beans:property name="passwordParameter" value="j_password"/>
		<beans:property name="postOnly" value="true"/>
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check"/>
		
		<beans:property name="authenticationManager" ref="myAuthenticationManager"/>
		<beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"/>
		<beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"/>
		<!-- <beans:property name="userDetailsService" ref="myUserDetailService"/> -->	
	</beans:bean>
	
	<!-- 登陆认证成功处理 -->
	<beans:bean id="loginLogAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/front/login!doLoginSuccessfulAfterProcess"/>
		<beans:property name="alwaysUseDefaultTargetUrl" value="true"/>
		<!-- 指定登录成功后，从request获取指定的targetUrlParameter的参数的值作为跳转的url -->
		<!-- <beans:property name="targetUrlParameter" value="loginSuccessForwardUrl"/> -->
	</beans:bean>
	<!-- 登陆认证失败处理 -->
	<beans:bean id="simpleUrlAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login.jsp?error=true"/>
	</beans:bean>
	
	
	<!-- 访问拦截过滤器，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    		我们的所有控制将在这三个类中实现 -->
    <beans:bean id="myAuthorizationFilter" class="com.platform.project.sys.security.springsecurity.MyAuthorizationFilter">
    	<beans:property name="authenticationManager" ref="myAuthenticationManager"/>	<!-- 用户拥有的权限 -->
    	<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource"/>	<!-- 资源与权限对应关系 -->
    	<beans:property name="accessDecisionManager" ref="myAccessDecisionManager"/>	<!-- 用户是否拥有所请求资源的权限 -->
    </beans:bean>
    
	
	<!-- 认证管理器，提供认证服务 -->
	<authentication-manager alias="myAuthenticationManager">
		<!-- 方式一：由MyUserDetailService充当认证服务提供者
		<authentication-provider user-service-ref="myUserDetailService"/> -->
		<!-- 方式二：由扩展的认证提供者myAuthenticationProvider充当认证服务提供者，方式二扩展性更好 -->
		<authentication-provider ref="myAuthenticationProvider" />
	</authentication-manager>
	
	<!-- 认证提供者扩展 -->
	<beans:bean id="myAuthenticationProvider" class="com.platform.project.sys.security.springsecurity.MyAuthenticationProvider">
		<beans:property name="userDetailsService" ref="myUserDetailService"/>
		<beans:property name="passwordEncoder" ref="myPasswordEncoder"/>
	</beans:bean>
	
	<!-- 认证提供器 -->
	<beans:bean id="myUserDetailService" class="com.platform.project.sys.security.springsecurity.MyUserDetailService"></beans:bean>
	<beans:bean id="myPasswordEncoder" class="com.platform.project.sys.security.springsecurity.MyPasswordEncoder"></beans:bean>
    
    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问，即资源与权限对应关系 -->
    <beans:bean id="mySecurityMetadataSource" class="com.platform.project.sys.security.springsecurity.MySecurityMetadataSource">
    </beans:bean>
    
    <!-- 访问决策器，决定某个用户具有的角色是否有足够的权限去访问某个资源 -->
    <beans:bean id="myAccessDecisionManager" class="com.platform.project.sys.security.springsecurity.MyAccessDecisionManager"></beans:bean>
		
	<!-- 未登录的切入点 -->
    <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="login.jsp"/>
    </beans:bean>
</beans:beans>